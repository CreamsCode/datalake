name: Deploy MongoDB Cluster on AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  validate-aws-credentials:
    name: Validate AWS Credentials
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: validate-aws-credentials
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
  
      - name: Terraform Init
        run: terraform init
  
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Debug Terraform Output
        run: terraform output
  
      - name: Export Outputs
        run: |
          CONFIG_SERVER_IP=$(terraform output -raw config_server_ip)
          MONGOS_IP=$(terraform output -raw mongos_ip)
          SHARD_IPS=$(terraform output -json shard_ips)

          echo "CONFIG_SERVER_IP=${CONFIG_SERVER_IP}" >> $GITHUB_ENV
          echo "MONGOS_IP=${MONGOS_IP}" >> $GITHUB_ENV
          echo "SHARD_IPS=${SHARD_IPS}" >> $GITHUB_ENV
  
      - name: Upload Terraform State
        uses: actions/upload-artifact@v3
        with:
          name: terraform-state
          path: terraform.tfstate


  test-mongodb-cluster:
    name: Test MongoDB Cluster
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Get Cluster IPs
        run: echo "Using CONFIG_SERVER_IP=$CONFIG_SERVER_IP, MONGOS_IP=$MONGOS_IP, SHARD_IPS=$SHARD_IPS"

      - name: Install MongoDB Client
        run: |
          echo '[mongodb-org-8.0]' | sudo tee /etc/yum.repos.d/mongodb-org-8.0.repo
          echo 'name=MongoDB Repository' | sudo tee -a /etc/yum.repos.d/mongodb-org-8.0.repo
          echo 'baseurl=https://repo.mongodb.org/yum/amazon/2023/mongodb-org/8.0/x86_64/' | sudo tee -a /etc/yum.repos.d/mongodb-org-8.0.repo
          echo 'gpgcheck=1' | sudo tee -a /etc/yum.repos.d/mongodb-org-8.0.repo
          echo 'enabled=1' | sudo tee -a /etc/yum.repos.d/mongodb-org-8.0.repo
          echo 'gpgkey=https://pgp.mongodb.com/server-8.0.asc' | sudo tee -a /etc/yum.repos.d/mongodb-org-8.0.repo
          sudo dnf install -y mongodb-org mongodb-mongosh-shared-openssl3 openssl mongodb-org-database-tools-extra mongodb-database-tools mongodb-org-tools mongodb-org-server mongodb-org-mongos mongodb-org-database jq
          sudo rm -f /tmp/mongodb-27017.sock
          sudo chown -R mongod:mongod /var/lib/mongo
          sudo chown -R mongod:mongod /var/log/mongodb
          sudo chmod 700 /var/lib/mongo
          sudo chmod 700 /var/log/mongodb
          sudo systemctl enable mongod
          sudo systemctl start mongod
          
      - name: Initialize Replica Sets on Shards
        run: |
          for ip in $(echo $SHARD_IPS | jq -r '.[]'); do
            mongo --host $ip:27017 --eval "rs.initiate()"
          done

      - name: Configure Shards on Mongos
        run: |
          for ip in $(echo $SHARD_IPS | jq -r '.[]'); do
            mongo --host $MONGOS_IP:27017 --eval "sh.addShard('$ip:27017')"
          done

      - name: Enable Sharding for Database
        run: mongo --host $MONGOS_IP:27017 --eval "sh.enableSharding('my_database')"

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, test-mongodb-cluster]
    if: always()

    steps:
      - name: Download Terraform State
        uses: actions/download-artifact@v3
        with:
          name: terraform-state

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Destroy Terraform Resources
        run: terraform destroy -auto-approve

