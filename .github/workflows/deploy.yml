name: Deploy MongoDB Cluster on AWS

on:
  push:
    branches:
      - main
  workflow_dispatch: 

jobs:
  validate-aws-credentials:
    name: Validate AWS Credentials
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Verify AWS Identity
        run: aws sts get-caller-identity

  create-backend-resources:
    name: Create Backend Resources
    runs-on: ubuntu-latest
    needs: validate-aws-credentials

    outputs:
      bucket_name: ${{ steps.get-backend.outputs.bucket_name }}
      region: ${{ steps.get-backend.outputs.region }}
      key: ${{ steps.get-backend.outputs.key }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform Locally
        run: terraform init -backend=false

      - name: Create Backend Resources
        run: terraform apply -auto-approve -target=null_resource.create_bucket_and_upload

      - name: Get Backend Outputs
        id: get-backend
        run: |
          echo "bucket_name=$(terraform output -raw backend_bucket_name)" >> $GITHUB_OUTPUT
          echo "region=$(terraform output -raw backend_region)" >> $GITHUB_OUTPUT
          echo "key=$(terraform output -raw backend_key)" >> $GITHUB_OUTPUT

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: create-backend-resources

    outputs:
      config_server_ip: ${{ steps.save-outputs.outputs.config_server_ip }}
      mongos_ip: ${{ steps.save-outputs.outputs.mongos_ip }}
      shard_ips: ${{ steps.save-outputs.outputs.shard_ips }}
  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
  
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Configure Backend
        run: |
          terraform init -backend-config="bucket=${{ needs.create-backend-resources.outputs.bucket_name }}" \
                         -backend-config="key=${{ needs.create-backend-resources.outputs.key }}" \
                         -backend-config="region=${{ needs.create-backend-resources.outputs.region }}" \
                         -reconfigure

  
      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve

      - name: Debug Terraform Output
        run: terraform output

      - name: Save Terraform Outputs
        id: save-outputs
        run: |
          echo "config_server_ip=$(terraform output -raw config_server_ip)" >> "$GITHUB_OUTPUT"
          echo "mongos_ip=$(terraform output -raw mongos_ip)" >> "$GITHUB_OUTPUT"
          echo "shard_ips=$(terraform output -json shard_ips)" >> "$GITHUB_OUTPUT"
  
      - name: Upload Terraform Files
        uses: actions/upload-artifact@v3
        with:
          name: terraform-files
          path: |
            .terraform/
            terraform.tfstate

  test-mongodb-cluster:
    name: Test MongoDB Cluster
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Get Cluster IPs
        run: |
          echo "Config Server IP: ${{ needs.deploy-infrastructure.outputs.config_server_ip }}"
          echo "Mongos IP: ${{ needs.deploy-infrastructure.outputs.mongos_ip }}"
          echo "Shard IPs: ${{ needs.deploy-infrastructure.outputs.shard_ips }}"

      - name: Install MongoDB Client
        run: |
          wget -qO - https://www.mongodb.org/static/pgp/server-8.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/8.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org jq
          sudo systemctl enable mongod
          sudo systemctl start mongod
          
      - name: Initialize Replica Sets on Shards
        run: |
          for ip in $(echo $SHARD_IPS | jq -r '.[]'); do
            mongo --host $ip:27017 --eval "rs.initiate()"
          done

      - name: Configure Shards on Mongos
        run: |
          for ip in $(echo $SHARD_IPS | jq -r '.[]'); do
            mongo --host $MONGOS_IP:27017 --eval "sh.addShard('$ip:27017')"
          done

      - name: Enable Sharding for Database
        run: mongo --host $MONGOS_IP:27017 --eval "sh.enableSharding('my_database')"

  cleanup:
    name: Cleanup Resources
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, test-mongodb-cluster]
    if: failure()

    steps:
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false

      - name: Initialize Terraform with Backend
        run: |
          terraform init -backend-config="bucket=${{ needs.create-backend-resources.outputs.bucket_name }}" \
                         -backend-config="key=${{ needs.create-backend-resources.outputs.key }}" \
                         -backend-config="region=${{ needs.create-backend-resources.outputs.region }}" \
                         -reconfigure


      - name: Destroy Terraform Resources
        run: terraform destroy -auto-approve

